var roiii,creedit_scor,creddit_w,termmm,lloan_type,propp_val,aanual_inc,pp_o_loan,lloan_amm;
var golbalBorrowerAddress;
var golbalBorrowerAmmount;
var golbalLenderAddress;
var golbalLenderAmount;
var golbalLoanID;
var statuss=1;

document.addEventListener('DOMContentLoaded', function () {
    try {

        var a = document.querySelector('#register');
        if (a) { a.addEventListener('click', () => getRegisterData()); }
        var b = document.querySelector('#add_user');
        if (b) { b.addEventListener('click', () => add_user()); }
        var c = document.querySelector('#connectt_user');
        if (c) { c.addEventListener('click', () => connectt()); }

        // document.querySelector('#get_lender').addEventListener('click', () => get_lender());
        var d = document.querySelector('#te');
        if (d) { d.addEventListener('click', () => getRegisterData()); }

        
        // Apply Loan

        var e = document.querySelector('#apply_l');
        if (e) { e.addEventListener('click', () => apply_loan()); }




        var g = document.querySelector('#get_borower');
        if (g) { g.addEventListener('click', () => getBorrower()); }


        var payBorrower = document.querySelector('#payToBorrower');
        if (payBorrower) { payBorrower.addEventListener('click', () => sendMoneyToBorrower()); }

        
        var payEMI = document.querySelector('#payEMItoLender');
        if (payEMI) { payEMI.addEventListener('click', () => sendMoneyToLender()); }



        // Filter actions

        var c_s_filter = document.querySelector('#creditScoreFilterButton');
        if (c_s_filter) { c_s_filter.addEventListener('click', () => creditScoreFilter()); }

        

        lloan_amm = JSON.parse(document.getElementById('loan_a').textContent);
        pp_o_loan = JSON.parse(document.getElementById('p_o_loan').textContent);
        term = JSON.parse(document.getElementById('term').textContent);
        roiii = JSON.parse(document.getElementById('roi').textContent);
        creddit_w = JSON.parse(document.getElementById('credit_worthiness').textContent);



        
    }
    catch (e) { console.log("ee", e) }
});

var web3 = new Web3(window.ethereum);
// var Contract = require('web3-eth-contract');
var acc = null;
var contract_addr = "0x098117d0B6A995869C5e8f2084736ED5d4fD857d";
// var contract_addr = "0x51A4A2C0BbB7e840025bB55a3c00c9E5F63174B3`"; new

window.onload = function () {
    connectt();
};

const connectt = async () => {
    console.log("connectt")
    if (window.ethereum) {
        await window.ethereum.send('eth_requestAccounts');
        window.web3 = new Web3(window.ethereum);

        var accounts = await web3.eth.getAccounts();
        acc = accounts[0];
        // console.log("Wallet Address connected->", acc);
        // console.log("contract_addr->",contract_addr);
        (async () => {
            call_contract(contract_addr);
        })();
    }
    else {
        console.log("else")
    }
    getUserType(acc);
};

var abi = JSON.parse('[{"inputs":[{"internalType":"uint256","name":"lo_amount","type":"uint256"},{"internalType":"uint256","name":"lo_purpose","type":"uint256"},{"internalType":"uint256","name":"termmm","type":"uint256"},{"internalType":"string","name":"roiii","type":"string"},{"internalType":"uint256","name":"creditscore","type":"uint256"},{"internalType":"uint256","name":"creditworthiness","type":"uint256"}],"name":"approved_loan_ids","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"approved_loans","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"borower_list","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"get","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"addr","type":"address"}],"name":"get_borrower","outputs":[{"internalType":"string","name":"","type":"string"},{"internalType":"string","name":"","type":"string"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"address[]","name":"","type":"address[]"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"get_borrower_list","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"get_l","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"addr","type":"address"}],"name":"get_lender","outputs":[{"internalType":"string","name":"","type":"string"},{"internalType":"string","name":"","type":"string"},{"internalType":"string","name":"","type":"string"},{"internalType":"string","name":"","type":"string"},{"internalType":"address[]","name":"","type":"address[]"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"get_lender_list","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"b_num","type":"uint256"}],"name":"get_loann","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"},{"internalType":"string","name":"","type":"string"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address[]","name":"","type":"address[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"lender_list","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"loans","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address payable","name":"to","type":"address"},{"internalType":"uint256","name":"b_num","type":"uint256"}],"name":"sendmoneyy","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"email","type":"string"},{"internalType":"uint256","name":"pos","type":"uint256"},{"internalType":"string","name":"aadhar","type":"string"},{"internalType":"string","name":"pan","type":"string"},{"internalType":"uint256","name":"phone","type":"uint256"},{"internalType":"string","name":"gender","type":"string"},{"internalType":"uint256","name":"a_income","type":"uint256"},{"internalType":"uint256","name":"no_of_depeden","type":"uint256"}],"name":"user","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"nonpayable","type":"function"}]');


var bytecode = "608060405234801561001057600080fd5b50612c5f806100206000396000f3fe6080604052600436106100dd5760003560e01c8063b1f07cfd1161007f578063d08e727911610059578063d08e727914610316578063d7033d6814610341578063e1ec3c681461037e578063e9c9c18e146103bb576100dd565b8063b1f07cfd14610259578063cf3a5a1c14610296578063d0384871146102d9576100dd565b806361f46c22116100bb57806361f46c22146101985780636d4ce63c146101c857806387eea5fc146101f35780639397112714610230576100dd565b80630fa9b165146100e25780633f8ee26b146101255780634e94b75d14610150575b600080fd5b3480156100ee57600080fd5b5061010960048036038101906101049190612404565b6103e6565b60405161011c979695949392919061284d565b60405180910390f35b34801561013157600080fd5b5061013a61062e565b6040516101479190612656565b60405180910390f35b34801561015c57600080fd5b5061017760048036038101906101729190612241565b6106bc565b60405161018f9c9b9a99989796959493929190612755565b60405180910390f35b6101b260048036038101906101ad919061226e565b610c96565b6040516101bf9190612832565b60405180910390f35b3480156101d457600080fd5b506101dd61115b565b6040516101ea9190612678565b60405180910390f35b3480156101ff57600080fd5b5061021a60048036038101906102159190612404565b6111f3565b604051610227919061263b565b60405180910390f35b34801561023c57600080fd5b5061025760048036038101906102529190612431565b611232565b005b34801561026557600080fd5b50610280600480360381019061027b9190612404565b61146d565b60405161028d919061263b565b60405180910390f35b3480156102a257600080fd5b506102bd60048036038101906102b89190612241565b6114ac565b6040516102d097969594939291906126bc565b60405180910390f35b3480156102e557600080fd5b5061030060048036038101906102fb9190612404565b6119e6565b60405161030d919061263b565b60405180910390f35b34801561032257600080fd5b5061032b611a25565b6040516103389190612656565b60405180910390f35b34801561034d57600080fd5b50610368600480360381019061036391906122ae565b611ab3565b604051610375919061269a565b60405180910390f35b34801561038a57600080fd5b506103a560048036038101906103a09190612404565b611f06565b6040516103b29190612832565b60405180910390f35b3480156103c757600080fd5b506103d0611f2a565b6040516103dd9190612678565b60405180910390f35b60008060606000806060806005600089815260200190815260200160002060000154600560008a815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560008b8152602001908152602001600020600201600560008c815260200190815260200160002060030154600560008d815260200190815260200160002060050154600560008e8152602001908152602001600020600701600560008f81526020019081526020016000206008018480546104bb90612acf565b80601f01602080910402602001604051908101604052809291908181526020018280546104e790612acf565b80156105345780601f1061050957610100808354040283529160200191610534565b820191906000526020600020905b81548152906001019060200180831161051757829003601f168201915b50505050509450818054806020026020016040519081016040528092919081815260200182805480156105bc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610572575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561060e57602002820191906000526020600020905b8154815260200190600101908083116105fa575b505050505090509650965096509650965096509650919395979092949650565b606060018054806020026020016040519081016040528092919081815260200182805480156106b257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610668575b5050505050905090565b606080600080600080600080606080600060606000600460008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101c001604052908160008201805461072c90612acf565b80601f016020809104026020016040519081016040528092919081815260200182805461075890612acf565b80156107a55780601f1061077a576101008083540402835291602001916107a5565b820191906000526020600020905b81548152906001019060200180831161078857829003601f168201915b505050505081526020016001820180546107be90612acf565b80601f01602080910402602001604051908101604052809291908181526020018280546107ea90612acf565b80156108375780601f1061080c57610100808354040283529160200191610837565b820191906000526020600020905b81548152906001019060200180831161081a57829003601f168201915b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156108c557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161087b575b505050505081526020016003820180546108de90612acf565b80601f016020809104026020016040519081016040528092919081815260200182805461090a90612acf565b80156109575780601f1061092c57610100808354040283529160200191610957565b820191906000526020600020905b81548152906001019060200180831161093a57829003601f168201915b5050505050815260200160048201805461097090612acf565b80601f016020809104026020016040519081016040528092919081815260200182805461099c90612acf565b80156109e95780601f106109be576101008083540402835291602001916109e9565b820191906000526020600020905b8154815290600101906020018083116109cc57829003601f168201915b5050505050815260200160058201548152602001600682018054610a0c90612acf565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3890612acf565b8015610a855780601f10610a5a57610100808354040283529160200191610a85565b820191906000526020600020905b815481529060010190602001808311610a6857829003601f168201915b50505050508152602001600782015481526020016008820154815260200160098201805480602002602001604051908101604052809291908181526020018280548015610af157602002820191906000526020600020905b815481526020019060010190808311610add575b50505050508152602001600a8201548152602001600b8201548152602001600c8201548152602001600d820160405180606001604052908160008201805480602002602001604051908101604052809291908181526020018280548015610bad57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610b63575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610c0557602002820191906000526020600020905b815481526020019060010190808311610bf1575b50505050508152602001600282015481525050815250509050806000015181606001518260e001518361010001518460a00151856101400151866101600151876101800151886101200151896101a00151600001518a6101a00151604001518b6101a00151602001519c509c509c509c509c509c509c509c509c509c509c509c505091939597999b5091939597999b565b600060056000838152602001908152602001600020600701339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060056000838152602001908152602001600020600801349080600181540180825580915050600190039060005260206000200160009091909190915055346005600084815260200190815260200160002060030154610d6e9190612a0b565b6005600084815260200190815260200160002060030181905550600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600d01600001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600d0160010134908060018154018082558091505060019003906000526020600020016000909190919091505534600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600d016002018190555034600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600a0154610f3291906129b5565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600a0181905550600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601600001839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601600101819055508273ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015611151573d6000803e3d6000fd5b5034905092915050565b6060600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206009018054806020026020016040519081016040528092919081815260200182805480156111e957602002820191906000526020600020905b8154815260200190600101908083116111d5575b5050505050905090565b6003818154811061120357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003390506000439050876005600083815260200190815260200160002060030181905550816005600083815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550846005600083815260200190815260200160002060020190805190602001906112d6929190611f82565b5080600560008381526020019081526020016000206000018190555087600560008381526020019081526020016000206003018190555086600560008381526020019081526020016000206004018190555085600560008381526020019081526020016000206005018190555082600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600c018190555083600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600b0181905550600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060090181908060018154018082558091505060019003906000526020600020016000909190919091505560008190806001815401808255809150506001900390600052602060002001600090919091909150555050505050505050565b6001818154811061147d57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606080606080606060006060600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600660008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600660008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600660008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601600001600660008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060160010154600660008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050186805461169990612acf565b80601f01602080910402602001604051908101604052809291908181526020018280546116c590612acf565b80156117125780601f106116e757610100808354040283529160200191611712565b820191906000526020600020905b8154815290600101906020018083116116f557829003601f168201915b5050505050965085805461172590612acf565b80601f016020809104026020016040519081016040528092919081815260200182805461175190612acf565b801561179e5780601f106117735761010080835404028352916020019161179e565b820191906000526020600020905b81548152906001019060200180831161178157829003601f168201915b505050505095508480546117b190612acf565b80601f01602080910402602001604051908101604052809291908181526020018280546117dd90612acf565b801561182a5780601f106117ff5761010080835404028352916020019161182a565b820191906000526020600020905b81548152906001019060200180831161180d57829003601f168201915b5050505050945083805461183d90612acf565b80601f016020809104026020016040519081016040528092919081815260200182805461186990612acf565b80156118b65780601f1061188b576101008083540402835291602001916118b6565b820191906000526020600020905b81548152906001019060200180831161189957829003601f168201915b505050505093508280548060200260200160405190810160405280929190818152602001828054801561193e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116118f4575b50505050509250808054806020026020016040519081016040528092919081815260200182805480156119c657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161197c575b505050505090509650965096509650965096509650919395979092949650565b600281815481106119f657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606002805480602002602001604051908101604052809291908181526020018280548015611aa957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611a5f575b5050505050905090565b606060003390506000891415611d2357611acb612008565b8b81600001819052508881606001819052508a8160200181905250878160800181905250868160a0018181525050858160c00181905250848160e0018181525050838161010001818152505080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190611b73929190611f82565b506020820151816001019080519060200190611b90929190611f82565b506040820151816002019080519060200190611bad92919061207d565b506060820151816003019080519060200190611bca929190611f82565b506080820151816004019080519060200190611be7929190611f82565b5060a0820151816005015560c0820151816006019080519060200190611c0e929190611f82565b5060e082015181600701556101008201518160080155610120820151816009019080519060200190611c41929190612107565b5061014082015181600a015561016082015181600b015561018082015181600c01556101a082015181600d016000820151816000019080519060200190611c8992919061207d565b506020820151816001019080519060200190611ca6929190612107565b506040820151816002015550509050506001829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508b92505050611ef9565b6001891415611ef4578a600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000019080519060200190611d82929190611f82565b5087600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001019080519060200190611dd9929190611f82565b5086600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003019080519060200190611e30929190611f82565b5089600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004019080519060200190611e87929190611f82565b506002819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508a915050611ef9565b600080fd5b9998505050505050505050565b60008181548110611f1657600080fd5b906000526020600020016000915090505481565b60606000805480602002602001604051908101604052809291908181526020018280548015611f7857602002820191906000526020600020905b815481526020019060010190808311611f64575b5050505050905090565b828054611f8e90612acf565b90600052602060002090601f016020900481019282611fb05760008555611ff7565b82601f10611fc957805160ff1916838001178555611ff7565b82800160010185558215611ff7579182015b82811115611ff6578251825591602001919060010190611fdb565b5b5090506120049190612154565b5090565b604051806101c0016040528060608152602001606081526020016060815260200160608152602001606081526020016000815260200160608152602001600081526020016000815260200160608152602001600081526020016000815260200160008152602001612077612171565b81525090565b8280548282559060005260206000209081019282156120f6579160200282015b828111156120f55782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061209d565b5b5090506121039190612154565b5090565b828054828255906000526020600020908101928215612143579160200282015b82811115612142578251825591602001919060010190612127565b5b5090506121509190612154565b5090565b5b8082111561216d576000816000905550600101612155565b5090565b60405180606001604052806060815260200160608152602001600081525090565b60006121a56121a0846128f6565b6128d1565b9050828152602081018484840111156121c1576121c0612bc4565b5b6121cc848285612a8d565b509392505050565b6000813590506121e381612be4565b92915050565b6000813590506121f881612bfb565b92915050565b600082601f83011261221357612212612bbf565b5b8135612223848260208601612192565b91505092915050565b60008135905061223b81612c12565b92915050565b60006020828403121561225757612256612bce565b5b6000612265848285016121d4565b91505092915050565b6000806040838503121561228557612284612bce565b5b6000612293858286016121e9565b92505060206122a48582860161222c565b9150509250929050565b60008060008060008060008060006101208a8c0312156122d1576122d0612bce565b5b60008a013567ffffffffffffffff8111156122ef576122ee612bc9565b5b6122fb8c828d016121fe565b99505060208a013567ffffffffffffffff81111561231c5761231b612bc9565b5b6123288c828d016121fe565b98505060406123398c828d0161222c565b97505060608a013567ffffffffffffffff81111561235a57612359612bc9565b5b6123668c828d016121fe565b96505060808a013567ffffffffffffffff81111561238757612386612bc9565b5b6123938c828d016121fe565b95505060a06123a48c828d0161222c565b94505060c08a013567ffffffffffffffff8111156123c5576123c4612bc9565b5b6123d18c828d016121fe565b93505060e06123e28c828d0161222c565b9250506101006123f48c828d0161222c565b9150509295985092959850929598565b60006020828403121561241a57612419612bce565b5b60006124288482850161222c565b91505092915050565b60008060008060008060c0878903121561244e5761244d612bce565b5b600061245c89828a0161222c565b965050602061246d89828a0161222c565b955050604061247e89828a0161222c565b945050606087013567ffffffffffffffff81111561249f5761249e612bc9565b5b6124ab89828a016121fe565b93505060806124bc89828a0161222c565b92505060a06124cd89828a0161222c565b9150509295509295509295565b60006124e6838361250a565b60208301905092915050565b60006124fe838361261d565b60208301905092915050565b61251381612a3f565b82525050565b61252281612a3f565b82525050565b600061253382612947565b61253d8185612982565b935061254883612927565b8060005b8381101561257957815161256088826124da565b975061256b83612968565b92505060018101905061254c565b5085935050505092915050565b600061259182612952565b61259b8185612993565b93506125a683612937565b8060005b838110156125d75781516125be88826124f2565b97506125c983612975565b9250506001810190506125aa565b5085935050505092915050565b60006125ef8261295d565b6125f981856129a4565b9350612609818560208601612a9c565b61261281612bd3565b840191505092915050565b61262681612a83565b82525050565b61263581612a83565b82525050565b60006020820190506126506000830184612519565b92915050565b600060208201905081810360008301526126708184612528565b905092915050565b600060208201905081810360008301526126928184612586565b905092915050565b600060208201905081810360008301526126b481846125e4565b905092915050565b600060e08201905081810360008301526126d6818a6125e4565b905081810360208301526126ea81896125e4565b905081810360408301526126fe81886125e4565b9050818103606083015261271281876125e4565b905081810360808301526127268186612528565b905061273560a083018561262c565b81810360c08301526127478184612528565b905098975050505050505050565b6000610180820190508181036000830152612770818f6125e4565b90508181036020830152612784818e6125e4565b9050612793604083018d61262c565b6127a0606083018c61262c565b6127ad608083018b61262c565b6127ba60a083018a61262c565b6127c760c083018961262c565b6127d460e083018861262c565b8181036101008301526127e78187612586565b90508181036101208301526127fc8186612528565b905061280c61014083018561262c565b81810361016083015261281f8184612586565b90509d9c50505050505050505050505050565b6000602082019050612847600083018461262c565b92915050565b600060e082019050612862600083018a61262c565b61286f6020830189612519565b818103604083015261288181886125e4565b9050612890606083018761262c565b61289d608083018661262c565b81810360a08301526128af8185612528565b905081810360c08301526128c38184612586565b905098975050505050505050565b60006128db6128ec565b90506128e78282612b01565b919050565b6000604051905090565b600067ffffffffffffffff82111561291157612910612b90565b5b61291a82612bd3565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006129c082612a83565b91506129cb83612a83565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612a00576129ff612b32565b5b828201905092915050565b6000612a1682612a83565b9150612a2183612a83565b925082821015612a3457612a33612b32565b5b828203905092915050565b6000612a4a82612a63565b9050919050565b6000612a5c82612a63565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612aba578082015181840152602081019050612a9f565b83811115612ac9576000848401525b50505050565b60006002820490506001821680612ae757607f821691505b60208210811415612afb57612afa612b61565b5b50919050565b612b0a82612bd3565b810181811067ffffffffffffffff82111715612b2957612b28612b90565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b612bed81612a3f565b8114612bf857600080fd5b50565b612c0481612a51565b8114612c0f57600080fd5b50565b612c1b81612a83565b8114612c2657600080fd5b5056fea26469706673582212200ee3cbf8473da2205e990c8209d1907e4132e83236524589e6c6cd9a0f7324ec64736f6c63430008070033";

const deploy = async (abi, bytecode) => {
    console.log("starting deployyyyy");
    var deploycontract = new web3.eth.Contract(abi).deploy({
        data: bytecode,
        arguments: []
    });
    var estimatedGas = await deploycontract.estimateGas();

    var deployedcontract = await deploycontract.send({
        from: acc,
        gas: estimatedGas
    })
    console.log("end")
    console.log("contract addr : " + deployedcontract.options.address);
    contract_addr = deployedcontract.options.address;
    console.log("contract addr : " + contract_addr);
    return deployedcontract.options.address;
}
(async () => {
    // await deploy(abi, bytecode);
    // call_contract(contract_addr);
    // console.log("deployeddd")
})();


var AgentContract;

function call_contract(contract_addrr) {
    AgentContract = new web3.eth.Contract(abi, contract_addrr);
    // console.log("aaaaa " + acc);
    // console.log("contract addr " + contract_addrr);
    return web3.currentProvider.selectedAddress;
}


function getBorrower() {
    console.log("Borrower list")
    // call_contract(contract_addr);
    // console.log("AgetnContract : " + AgentContract);
    // console.log("Wallete Address : " + acc);

    AgentContract.methods.get_borrower_list().call(acc, { gas: 1000000 }, function (error, results) {

        if (!error) {
            // console.log("Borrowerr Names : " + results);
            results.forEach(result => {
                get_bb(result);
            });
        }
        else {
            console.log(error)
        }
    })
}

function payToBrrower() {
    console.log("lender : ",to_addresss,amt)
    var amount=amt
    var to_addresss=asa;
    console.log(AgentContract);
    // var ad="0x4e03f84f1F93bdF9CE3507A4B6BEA02cB6f1EF3b"
    console.log(to_addresss)
    AgentContract.methods.sendmoneyy(to_addresss).send({value:amount, from: acc }).on("confirmation", function (cnfno, receipt) {
        console.log("sendinngggg paisa : " + cnfno); console.log("receipt : " + receipt);
    }).on('receipt', function (receipt) {
        // receipt example
        console.log(receipt);
    });
    console.log("send money!!");
}


function add_user(namee, email, pos, aadhar, pan, phone, gender, a_incom, dependents) {
    console.log("add user : " + namee + " " + email + " " + pos + " " + aadhar + " " + pan + " " + phone + " " + gender + " " + a_incom + " " + dependents)
    console.log(AgentContract);

    AgentContract.methods.user(namee, email, parseInt(pos), aadhar, pan, parseInt(phone), gender, parseInt(a_incom), parseInt(dependents)).send({ from: acc }).on("confirmation", function (cnfno, receipt) {
        console.log("cnf : " + cnfno); 
        console.log("receipt : " + receipt);
        GoToHomePage();
    }).on('receipt', function (receipt) {
        console.log(receipt);
    })
}

var asa,amt;
function get_bb(id) {

    AgentContract.methods.get_borrower(id).call(acc, { gas: 1000000 }, function (error, results) {
        if (!error) {
            var count = 1;
            const b_List = document.createElement('tr');
            if (b_List) {
                b_List.innerHTML = `
                        <th scope="row">#</th>
                        <td>${results[0]}</td>
                        <td>${results[1]}</td>
                        <td>${results[2]}</td>
                        <td>${results[6]}</td>
                        <td>${id}</td>
                `;
                amt=results[2];
                asa=id;
                var ss = document.querySelector('#borrowerLists');
                if (ss) { ss.append(b_List); }
                count = count + 1;
            }
        }
    })
}


function getRegisterData() {
    var firstName = document.getElementById('firstName').value;
    var lastName = document.getElementById('lastName').value;
    var emailAdd = document.getElementById('emailAdd').value;
    var aadharNo = document.getElementById('aadharNo').value;
    var panNo = document.getElementById('pan').value;
    var phone = document.getElementById('phone').value;
    var gender = document.getElementById('genderName').value;
    var dependents = document.getElementById('dependents').value;
    var a_incom = document.getElementById('a_income').value;

    var user_type = JSON.parse(document.getElementById('usertype').textContent);
    var pos = 0;
    // console.log("roott: " + user_type);
    if (user_type == "borrower") {
        pos = 0;
    }
    else{ 
        pos = 1; 
    }

    // validation of pan, aadhar, names
    fetch('/storeKYC', {
        method: 'POST',
        body: JSON.stringify({
            firstName : firstName,
            lastName : lastName,
            panNo : panNo,
            aadharNo : aadharNo,
            walletAddress : acc 
        })
    })
    .then(response => response.json())
    .then(userStatus => {
        if( userStatus.success == 1 )
        {
            // print user data
            // console.log("user credentials -> ",userStatus.success);
            // console.log(firstName, lastName, emailAdd, pos, aadharNo, panNo, 1121, phone, gender, a_incom, dependents);
            add_user(firstName + " " + lastName, emailAdd, pos, aadharNo, panNo, phone, gender, a_incom, dependents);
        }
        
        if( userStatus.success == 0 )
        {
            // console.log("user credentials -> ",userStatus.success);
            window.alert("Invalid Credentials");
        }
    })
    .catch(error => {
        console.error('Error:', error);
    });

    // GoToHomePage();
}

// loan

function apply_loan()
{
    fetch('/getKYCDetails', {
        method: 'POST',
        body: JSON.stringify({
            walletAddress : acc 
        })
    })
    .then(response => response.json())
    .then(data => {
        creedit_scor = data.CreditScore;
        applyLoanSmartContract();
    })
    .catch(error => {
        console.error('Error:', error);
    });

}

function applyLoanSmartContract()
{
    var roiiString = roiii.toString();
    AgentContract.methods.approved_loan_ids(lloan_amm, pp_o_loan, term, roiiString, creedit_scor, creddit_w).send({ from: acc }).on("confirmation", function (cnfno, receipt) {
        console.log("loannn : " + cnfno); 
        console.log("loann receipt : " + receipt);
    }).on('receipt', function (receipt) {
        console.log(receipt);
    })

    // make a function that go to home page or profile page 
}

function get_loan_data(addre) {
    console.log("get Loan data")
    console.log(addre)
    console.log(AgentContract);
    AgentContract.methods.get_borrower(addre).call(acc, { gas: 1000000 }, function (error, results) {
        if (!error) {
            // apply_loan(results[0], results[3], results[4]);
            // console.log("re " + results);
            console.log("aaplyyy_L : " + results[0] + " " + results[1] + " " + results[2] + " " + results[3] + " " + results[4] + " " + results[5] + " " + results[6] + " " + results[7] + " " + results[8] + " " + results[9] + " " + results[10] + " " + results[11]);
            try {
                document.getElementById("name").innerHTML = results[0];
                document.getElementById("email").innerHTML = results[3];
                document.getElementById("phone").innerHTML = results[8];
                document.getElementById("aadhar").innerHTML = results[1];
                document.getElementById("pan").innerHTML = results[2];
                document.getElementById("a_income").innerHTML = results[7];
                document.getElementById("dependents").innerHTML = results[8];
            }
            catch (e) { console.log("Error : " + e) }
        }
    })
}



function getUserType(walletAddress)
{
    AgentContract.methods.get_borrower_list().call(walletAddress, { gas: 1000000 }, function (error, borrowerList) {
        let isBorrower;
        if (!error) {
            borrowerList.forEach(borrowerAddress => {
                if( borrowerAddress == walletAddress )
                {
                    isBorrower = 1;
                }
            });
        }
        if( isBorrower == 1 )
        {
            console.log("borrower");

            document.getElementById("signUpLink").style.display = "none";
            document.getElementById("registerBorrower").style.display = "none";
            document.getElementById("registerLender").style.display = "none";
            document.getElementById("userprofileNavLink").style.display = "inline-block";
            document.getElementById("payLoanNavLink").style.display = "inline-block";

            AgentContract.methods.get_borrower(walletAddress).call(acc, { gas: 1000000 }, function (error, results) {
                if (!error) {
                    if( results[9].length != 0 )
                    {
                        document.getElementById("applyForLoanLink").style.display = "none";
                    }
                }
            })
            

            if( document.URL == 'http://127.0.0.1:8000/' )
            {
                document.getElementById("applyForLoanLink").style.display = "inline";
            }

            
            if( document.URL == 'http://127.0.0.1:8000/userProfile' )
            {
                console.log("user proflie");
                fetch('/getKYCDetails', {
                    method: 'POST',
                    body: JSON.stringify({
                        walletAddress : walletAddress 
                    })
                })
                .then(response => response.json())
                .then(data => {
                    document.getElementById("firstNamePro").value = data.FirstName;
                    document.getElementById("lastNamePro").value = data.LastName;
                    document.getElementById("creditScorePro").value = data.CreditScore;
                    document.getElementById("panNumberPro").value = data.PANnumber;
                    document.getElementById("aadharNumberPro").value = data.AadharNumber;
                    document.getElementById("walletAddressPro").value = data.WalletAddress;
                })
                .catch(error => {
                    console.error('Error:', error);
                });
                
                AgentContract.methods.get_borrower(walletAddress).call(acc, { gas: 1000000 }, function (error, results) {
                    if (!error) 
                    {
                        document.getElementById("annualIncomePro").value = results[2];
                        document.getElementById("noOfDependentsPro").value = results[3];
                        document.getElementById("phoneNoPro").value = results[4];
                    }
                });
            }

            if( document.URL == 'http://127.0.0.1:8000/userPayment' )
            {
                var receivedAmount = 0;
                console.log("user proflie");
                fetch('/getKYCDetails', {
                    method: 'POST',
                    body: JSON.stringify({
                        walletAddress : walletAddress 
                    })
                })
                .then(response => response.json())
                .then(data => {

                    AgentContract.methods.get_borrower(walletAddress).call(acc, { gas: 1000000 }, function (error, results) {
                        if (!error) {
                            AgentContract.methods.get_loann(results[8][0]).call(acc, { gas: 1000000 }, function (error, loanInfo) {
                                if (!error) {
                                    // loan Info
                                    golbalLoanID = loanInfo[0];

                                    var loanAmount;
                                    if( loanInfo[3] == 0 )
                                    {
                                        loanAmount = results[5];
                                        document.getElementById("LoanAmount").value = results[5];
                                    }
                                    else
                                    {
                                        loanAmount = loanInfo[3];
                                        document.getElementById("LoanAmount").value = loanInfo[3];
                                    }
                                    document.getElementById("amountReceived").value = results[5];                                   
                                    document.getElementById("RateOfInterest").value = loanInfo[2];
                                    console.log(loanInfo);
                                    document.getElementById("termDays").value = loanInfo[4];

                                    receivedAmount = results[5];
                                    // var interestRate = loanInfo[2];
                                    var interestRate = 12;    // change this is hard coded interest rate
                                    var loanTenure = 12;
                                    
                                    let r = parseFloat(interestRate)/12/100;
                                    let P = loanAmount;
                                    let n = loanTenure;

                                    let EMI = (P*r* Math.pow((1+r),n)) / (Math.pow((1+r),n)-1);
                                    let totalInterest =(EMI * n) - P;
                                    let totalPayment  = totalInterest + parseFloat(P);

                                    golbalLenderAddress = loanInfo[5][0];
                                    golbalLenderAmount = Math.round(EMI);

                                    document.getElementById("totalPayment").value = Math.round(totalPayment);
                                    document.getElementById("totalInterest").value = Math.round(totalInterest);
                                    document.getElementById("monthlyPayment").value = Math.round(EMI);
                                    if( receivedAmount == 0 )
                                    {
                                        document.getElementById("payEMItoLender").style.display = "none";
                                    }
                                }
                            })
                        }
                    })

                    document.getElementById("firstNamePay").value = data.FirstName;
                    document.getElementById("lastNamePay").value = data.LastName;
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            }
        }
        else
        {
            AgentContract.methods.get_lender_list().call(walletAddress, { gas: 1000000 }, function (error, lenderList) {
                let isLender;
                if (!error) {
                    lenderList.forEach(lenderAddress => {
                        if( lenderAddress == walletAddress )
                        {
                            isLender = 1;
                        }
                    });
                }

                if( isLender == 1 )
                {
                    console.log("Lender");
                    document.getElementById("registerBorrower").style.display = "none";
                    document.getElementById("registerLender").style.display = "none";
                    document.getElementById("signUpLink").style.display = "none";
                    document.getElementById("borrowerNavLink").style.display = "inline-block";
                    document.getElementById("appliedLoanNavLink").style.display = "inline-block";
                    document.getElementById("dashboardNavLink").style.display = "inline-block";

                    // var getDashboard = document.URL.split('/');
                    // if( getDashboard[3] == 'dashboard' )
                    // {
                    //     makeDashboar();
                    // }
                    
                    var getBorrowerPayUrl = document.URL.split('/');
                    if( getBorrowerPayUrl[3] == 'lenderPay' )
                    {
                        fetch('/getKYCAadhar', {
                            method: 'POST',
                            body: JSON.stringify({
                                aadharNo : getBorrowerPayUrl[4] 
                            })
                        })
                        .then(response => response.json())
                        .then(data => {
                            document.getElementById("firstNameProLen").value = data.FirstName;
                            document.getElementById("lastNameProLen").value = data.LastName;
                            document.getElementById("creditScoreProLen").value = data.CreditScore;
                            document.getElementById("panNumberProLen").value = data.PANnumber;
                            document.getElementById("aadharNumberProLen").value = data.AadharNumber;
                            document.getElementById("walletAddressProLen").value = data.WalletAddress;
                            golbalBorrowerAddress = data.WalletAddress;
                            
                            AgentContract.methods.get_borrower(data.WalletAddress).call(acc, { gas: 1000000 }, function (error, results) {
                                if (!error) {
                                    AgentContract.methods.get_loann(results[8][0]).call(acc, { gas: 1000000 }, function (error, loanInfo) {
                                        if (!error) {
                                            console.log(loanInfo);
                                            document.getElementById("loanAppliedProLen").value = loanInfo[3];
                                            document.getElementById("annualIcomeProLen").value = results[2];
                                            document.getElementById("noOfDependentsProLen").value = results[3];
                                            document.getElementById("phoneNoProLen").value = results[4];
                                            document.getElementById("rateOfInterestProLen").value = loanInfo[2];
                                            document.getElementById("loanTermProLen").value = loanInfo[4];
                                            golbalBorrowerAmmount = loanInfo[3];
                                            golbalLoanID = loanInfo[0];

                                            if( results[5].length == 1 )
                                            {
                                                document.getElementById("loanStatus").value = "Not Paid";
                                            }
                                            else
                                            {
                                                document.getElementById("payToBorrower").style.display = "none";
                                                document.getElementById("loanStatus").value = "Paid";
                                            }
                                            
                                        }
                                    })
                                }
                            })
                            
                        })
                        .catch(error => {
                            console.error('Error:', error);
                        });
                    }
                    
                    if( document.URL == 'http://127.0.0.1:8000/loanapplied' )
                    {
                        getAppliedLoans();
                    }
                    else if(document.URL == 'http://127.0.0.1:8000/borrowerList')
                    {
                        getBorrower();
                    }
                    else if(document.URL == 'http://127.0.0.1:8000/dashboard')
                    {
                        makeDashboar(walletAddress);
                    }
                }
                else
                {
                    console.log("User Connected with wallet")
                    document.getElementById("borrowerNavLink").style.display = "none";
                    document.getElementById("appliedLoanNavLink").style.display = "none";
                    // document.getElementById("borrowerLink").style.display = "none";
                    // document.getElementById("appliedLoanLink").style.display = "none";
                    // document.getElementById("applyForLoanLink").style.display = "none";
                }

            })
        }
    })

    // For no. of register Lender Address
    // AgentContract.methods.get_lender_list().call(walletAddress, { gas: 1000000 }, function (error, lenderList) {
    //     if (!error) {
    //         lenderList.forEach(lenderAddress => {
    //             console.log(lenderAddress);
    //         });
    //     }
    // })
}


// Make Dashboard
function makeDashboar(walletAddress)
{
    console.log("Dashboard");

    AgentContract.methods.get_lender(walletAddress).call(acc, { gas: 1000000 }, function (error, results) {
        if (!error) {
            console.log(results);
            document.getElementById("lenderName").innerHTML = results[0];
            document.getElementById("lednerEmail").innerHTML = results[1];

            results[6].forEach(borrowerAddress => {
                console.log(borrowerAddress);
                
                AgentContract.methods.get_borrower(borrowerAddress).call(acc, { gas: 1000000 }, function (error, borrowerData) {
                    if (!error) {
                        console.log(borrowerData)
                        const b_List = document.createElement('tr');
                        if (b_List)
                        {
                            b_List.innerHTML = `
                                <th scope="row">#</th>
                                <td>${borrowerData[0]}</td>
                                <td>${borrowerData[5]}</td>
                                <td>0</td>
                                <td bgcolor="black">
                                    <a href="http://127.0.0.1:8000/lenderPay/${results[1]}">
                                        View Profile
                                    </a>
                                </td>
                            `;
                            var ss = document.querySelector('#dashBoard');
                            if (ss) { ss.append(b_List); }
                        }
                    }
                })


            });

        }
    })

}



function sendMoneyToBorrower()
{
    var amount = parseInt(golbalBorrowerAmmount);
    AgentContract.methods.sendmoneyy(golbalBorrowerAddress, golbalLoanID).send({value:amount, from: acc, gas: 1000000 }).on("confirmation", function (cnfno, receipt) {
        console.log("sending money : " + cnfno); 
        console.log("receipt : " + receipt);
    }).on('receipt', function (receipt) {
        // receipt example
        console.log(receipt);
    });
}

function sendMoneyToLender()
{
    console.log("sendMoneyToLender");
    var amount = parseInt(golbalLenderAmount);
    
    AgentContract.methods.sendmoneyy(golbalLenderAddress, golbalLoanID).send({value: amount, from: acc, gas: 1000000 }).on("confirmation", function (cnfno, receipt) {
        console.log("sending money : " + cnfno); 
        console.log("receipt : " + receipt);
    }).on('receipt', function (receipt) {
        // receipt example
        console.log(receipt);
    });
}


function getAppliedLoans()
{
    console.log("Get Applied Loan", acc);

    AgentContract.methods.get_borrower_list().call(acc, { gas: 1000000 }, function (error, results) {
        if (!error) {
            results.forEach(walletAddress => {
                getLoanData(walletAddress, 0, 0, 0, 0);
            });
        }
        else {
            console.log(error)
        }
    })
}

function getLoanData(walletAddress, creditSocreFrom, creditScoreTo, interestRateFrom, interestRateTo)
{
    AgentContract.methods.get_borrower(walletAddress).call(acc, { gas: 1000000 }, function (error, results) {
        if (!error) {
            if( results[8].length != 0 && creditSocreFrom == 0 && creditScoreTo == 0 && interestRateFrom == 0 && interestRateTo == 0 )
            {
                AgentContract.methods.get_loann(results[8][0]).call(acc, { gas: 1000000 }, function (error, loanInfo) {
                    if (!error) {
                        const b_List = document.createElement('tr');
                        if (b_List)
                        {
                            b_List.innerHTML = `
                                <th scope="row">#</th>
                                <td>${results[0]}</td>
                                <td>${results[6]}</td>
                                <td>${loanInfo[2]}</td>
                                <td>${loanInfo[3]}</td>
                                <td bgcolor="black">
                                    <a href="http://127.0.0.1:8000/lenderPay/${results[1]}">
                                        View Profile
                                    </a>
                                </td>
                            `;
                            var ss = document.querySelector('#appliedLoanLists');
                            if (ss) { ss.append(b_List); }
                        }
                    }
                })
            }
            else if( results[8].length != 0 && results[6] >= creditSocreFrom  && results[6] <= creditScoreTo )
            {
                console.log(creditSocreFrom, creditScoreTo);
                // Credit Score Filter
                AgentContract.methods.get_loann(results[8][0]).call(acc, { gas: 1000000 }, function (error, loanInfo) {
                    if (!error) {
                        const b_List = document.createElement('tr');
                        if (b_List)
                        {
                            b_List.innerHTML = `
                                <th scope="row">#</th>
                                <td>${results[0]}</td>
                                <td>${results[6]}</td>
                                <td>${loanInfo[2]}</td>
                                <td>${loanInfo[3]}</td>
                                <td bgcolor="black">
                                    <a href="http://127.0.0.1:8000/lenderPay/${results[1]}">
                                        View Profile
                                    </a>
                                </td>
                            `;
                            var ss = document.querySelector('#appliedLoanLists');
                            if (ss) { ss.append(b_List); }
                        }
                    }
                })
            }
            else if( results[8].length != 0 && interestRateFrom > 0 && interestRateTo > 0 )
            {

                // Interest Rate 
                console.log(results);
                AgentContract.methods.get_loann(results[8][0]).call(acc, { gas: 1000000 }, function (error, loanInfo) {
                    if (!error) {

                        if( loanInfo[2] >= interestRateFrom  && loanInfo[2] <= interestRateTo )
                        {
                            const b_List = document.createElement('tr');
                            if (b_List)
                            {
                                b_List.innerHTML = `
                                    <th scope="row">#</th>
                                    <td>${results[0]}</td>
                                    <td>${results[6]}</td>
                                    <td>${loanInfo[2]}</td>
                                    <td>${loanInfo[3]}</td>
                                    <td bgcolor="black">
                                        <a href="http://127.0.0.1:8000/lenderPay/${results[1]}">
                                            View Profile
                                        </a>
                                    </td>
                                `;
                                var ss = document.querySelector('#appliedLoanLists');
                                if (ss) { ss.append(b_List); }
                            }
                        }
                    }
                })
            }
        }
    })
}


function getBorrowerInfo(walletAddress)
{
    AgentContract.methods.get_borrower(walletAddress).call(acc, { gas: 1000000 }, function (error, results) {
        if (!error) {
            console.log(results);
            console.log("income - ",results[4]);
            console.log("phone - ",results[6]);
        }
    })
}


// Credit Score Filter
function creditScoreFilter()
{
    var creditSocreFrom = document.getElementById('creditScoreFilterFrom').value;
    var creditScoreTo = document.getElementById('creditScoreFilterTo').value;

    document.getElementById('appliedLoanLists').innerHTML = '';

    if( creditScoreTo < creditSocreFrom )
    {
        alert("Invalid Credit Score");
    }
    else 
    {
        AgentContract.methods.get_borrower_list().call(acc, { gas: 1000000 }, function (error, results) {
            if (!error) {
                results.forEach(walletAddress => {
                    getLoanData(walletAddress, creditSocreFrom, creditScoreTo, 0, 0);
                });
            }
            else {
                console.log(error)
            }
        })
    }
}

// Interest Rate Filter
function interestRateFilter()
{
    alert("Interest Rate");

    var interestRateFrom = document.getElementById('interestRateFilterFrom').value;
    var interestRateTo = document.getElementById('interestRateFilterTo').value;

    document.getElementById('appliedLoanLists').innerHTML = '';

    if( interestRateTo < interestRateFrom )
    {
        alert("Invalid Interst Rate");
    }
    else
    {   
        AgentContract.methods.get_borrower_list().call(acc, { gas: 1000000 }, function (error, results) {
            if (!error) {
                results.forEach(walletAddress => {
                    getLoanData(walletAddressa, 0, 0, interestRateFrom, interestRateTo);
                });
            }
            else {
                console.log(error)
            }
        })
    }

}


function storeKYC(firstName, lastName, panNo, aadharNo, walletAddress)
{   
    print(walletAddress);
    fetch('/storeKYC', {
        method: 'POST',
        body: JSON.stringify({
            firstName : firstName,
            lastName : lastName,
            panNo : panNo,
            aadharNo : aadharNo,
            walletAddress : walletAddress 
        })
    })
    .then(response => response.json())
    .then(data => {
        console.log(data.success)
    })
    .catch(error => {
        console.error('Error:', error);
    });
}


function getKYCDetails(walletAddress)
{   
    fetch('/getKYCDetails', {
        method: 'POST',
        body: JSON.stringify({
            walletAddress : walletAddress 
        })
    })
    .then(response => response.json())
    .then(data => {
        console.log(data)
    })
    .catch(error => {
        console.error('Error:', error);
    });
}

function GoToHomePage()
{
    window.location = '/';
}
